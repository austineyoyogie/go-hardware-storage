package auth_controllers

import (
	"encoding/json"
	"io/ioutil"
	"log"
	"net/http"

	"github.com/austineyoyogie/go-hardware-store/api-jwt-auth/auth"
	"github.com/austineyoyogie/go-hardware-store/api-jwt-auth/auth_repository"
	"github.com/austineyoyogie/go-hardware-store/api-jwt-auth/models"
	"github.com/austineyoyogie/go-hardware-store/utils"
)

type LoginController interface {
	PostLogin(http.ResponseWriter, *http.Request)
	RefreshToken(http.ResponseWriter, *http.Request)	
}

type loginControllerImpl struct {
	loginRepository auth_repository.LoginRepository
}

func UserLoginController(loginRepository auth_repository.LoginRepository) *loginControllerImpl {
	return &loginControllerImpl{loginRepository}
}

func (u *loginControllerImpl) PostLogin(w http.ResponseWriter, r *http.Request) {
	
	if r.Body != nil { 
		defer r.Body.Close()
	}
	bytes, err := ioutil.ReadAll(r.Body)
	if err != nil {
		utils.WriteError(w, err, http.StatusUnprocessableEntity)
		return
	}

	jwt := &models.JWT{}
	user := &models.User{}
	err = json.Unmarshal(bytes, &user)
	if err != nil {
		utils.WriteError(w, err, http.StatusUnprocessableEntity)
		return
	}

	err = user.UserLoginValidate()
	 if err != nil {
	 	utils.WriteError(w, err, http.StatusBadRequest)
	 	return
	}
	
	var password = user.Password

	user, err = u.loginRepository.FindByEmail(user.Email)
	if err != nil {
		//utils.WriteError(w, err, http.StatusUnauthorized)
		utils.ResponseWithError(w, http.StatusUnauthorized, "Ohoo.. Invalid credentials")
		return 
	}
	token, err := auth.GenerateJWT(user)
	if err != nil {
		log.Fatal(err)
	}

	refresh, err := auth.RefreshJWT(user)
	if err != nil {
		log.Fatal(err)
	}
	
	hashPassword := user.Password
	hashCheck := utils.ComparePassword(password, hashPassword)
	
	if hashCheck {
		w.WriteHeader(http.StatusOK)
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.Header().Set("Authorization", token)
		//w.Write().Set("Accept": "application/json")


		jwt.Token = token
		jwt.Refresh = refresh

		//utils.WriteAsJson(w, jwt)
		 utils.WriteAsJson(w, struct { 
 		 	Token string `json:"access_token"`
 		 	Refresh string `json:"refresh_token"`			
 		 } { Token: token, 
 		 	Refresh: refresh,
 		 })



	} else {
		utils.ResponseWithError(w, http.StatusUnauthorized, "Invalid credentials")
	}
}

func (u *loginControllerImpl) RefreshToken(w http.ResponseWriter, r *http.Request) {

	if r.Body != nil { 
		defer r.Body.Close()
	}

	bytes, err := ioutil.ReadAll(r.Body)
	if err != nil {
		utils.WriteError(w, err, http.StatusUnprocessableEntity)
		return
	}

	jwt := &models.JWT{}
	user := &models.User{}

	err = json.Unmarshal(bytes, &user)
	if err != nil {
		utils.WriteError(w, err, http.StatusUnprocessableEntity)
		return
	}
	refresh, err := auth.RefreshJWT(user)
	if err != nil {
		log.Fatal(err)
	}
	w.WriteHeader(http.StatusOK)
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("Authorization", refresh)

	jwt.Refresh = refresh
	//utils.WriteAsJson(w, jwt)

	utils.WriteAsJson(w, struct { 
		Refresh string `json:"refresh_token"`			
	} { 
		Refresh: refresh,
	})
}

